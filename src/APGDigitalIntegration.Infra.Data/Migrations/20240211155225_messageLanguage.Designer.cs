// <auto-generated />
using System;
using APGDigitalIntegration.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace APGTransaction.Infra.Data.Migrations
{
    [DbContext(typeof(APGDigitalIntegrationContext))]
    [Migration("20240211155225_messageLanguage")]
    partial class messageLanguage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("MPCSSMessageIdSequence");

            modelBuilder.Entity("APGDigitalIntegration.Domain.Models.DigitalTransaction", b =>
                {
                    b.Property<long>("IdN")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("IdN");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdN"));

                    b.Property<long?>("AggregatorId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<long?>("BankId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDatetime")
                        .HasColumnType("timestamptz");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalTransactionId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("From")
                        .HasColumnType("varchar(25)");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("IsRefunded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("MaxResponseDatetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MerchantAccountTypeId")
                        .HasColumnType("integer");

                    b.Property<long>("MerchantBranchId")
                        .HasColumnType("bigint");

                    b.Property<long>("MerchantId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MerchantRefId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("OrderId");

                    b.Property<long?>("OriginalDigitalTransactionIdN")
                        .HasColumnType("bigint");

                    b.Property<string>("OriginalExternalTransactionId")
                        .HasColumnType("text");

                    b.Property<long?>("OriginalTransactionIdN")
                        .HasColumnType("bigint");

                    b.Property<string>("ReceiverAddress")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ReceiverMobileNo")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("ReceiverName")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("RefundCreatorId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RefundReason")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RefundSource")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("RequestSourceId")
                        .HasColumnType("integer");

                    b.Property<string>("ResponseCode")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ResponseDatetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("SenderAddress")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("SenderMobileNo")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("SenderName")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("SenderReferenceNo")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<long>("TerminalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TerminalNodeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("To")
                        .HasColumnType("varchar(25)");

                    b.Property<int>("TransactionMethodId")
                        .HasColumnType("integer");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.HasKey("IdN");

                    b.HasIndex("OriginalDigitalTransactionIdN");

                    b.ToTable("DigitalTransaction", (string)null);
                });

            modelBuilder.Entity("APGDigitalIntegration.Domain.Models.MerchantMPCSSTransactionRequest", b =>
                {
                    b.Property<long>("IdN")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("IdN");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdN"));

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamptz")
                        .HasColumnName("CreationDate");

                    b.Property<int?>("ErrorCode")
                        .HasColumnType("integer")
                        .HasColumnName("ErrorCode");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("ErrorMessage");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<string>("MessageId")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("VARCHAR(18)")
                        .HasColumnName("MessageId")
                        .HasComputedColumnSql("\"ParticipantPrefix\" || REPEAT('0', 14 - LENGTH(TRIM(TRAILING ' ' FROM \"SequenceId\"::TEXT))) || TRIM(TRAILING ' ' FROM \"SequenceId\"::TEXT)", true);

                    b.Property<string>("ParticipantPrefix")
                        .HasColumnType("VARCHAR(4)");

                    b.Property<int?>("PaymentViewType")
                        .HasColumnType("integer");

                    b.Property<long?>("QROrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("QROrderId");

                    b.Property<int>("RequestSourceId")
                        .HasColumnType("integer");

                    b.Property<long>("SequenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("NEXTVAL('\"MPCSSMessageIdSequence\"')");

                    b.Property<string>("Status")
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Status");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TransactionType");

                    b.Property<string>("UniqueNotificationId")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("UniqueNotificationId");

                    b.HasKey("IdN");

                    b.ToTable("MerchantMPCSSTransactionRequest");
                });

            modelBuilder.Entity("APGDigitalIntegration.Domain.Models.TransactionTimeoutEnquiry", b =>
                {
                    b.Property<int>("IdN")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("IdN");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdN"));

                    b.Property<string>("ActionTaken")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .HasColumnType("timestamptz");

                    b.Property<long>("DigitalTransactionId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("JobState")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<DateTimeOffset>("NextExecutionTime")
                        .HasColumnType("timestamptz");

                    b.Property<int>("NumberOfRuns")
                        .HasColumnType("integer");

                    b.Property<string>("OriginalMessageId")
                        .HasColumnType("text");

                    b.Property<string>("TransactionStatus")
                        .HasColumnType("text");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedDateTime")
                        .HasColumnType("timestamptz");

                    b.HasKey("IdN");

                    b.HasIndex("DigitalTransactionId");

                    b.ToTable("TransactionTimeoutEnquiry");
                });

            modelBuilder.Entity("APGDigitalIntegration.Domain.Models.DigitalTransaction", b =>
                {
                    b.HasOne("APGDigitalIntegration.Domain.Models.DigitalTransaction", "OriginalDigitalTransaction")
                        .WithMany()
                        .HasForeignKey("OriginalDigitalTransactionIdN");

                    b.Navigation("OriginalDigitalTransaction");
                });

            modelBuilder.Entity("APGDigitalIntegration.Domain.Models.TransactionTimeoutEnquiry", b =>
                {
                    b.HasOne("APGDigitalIntegration.Domain.Models.DigitalTransaction", "DigitalTransaction")
                        .WithMany()
                        .HasForeignKey("DigitalTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DigitalTransaction");
                });
#pragma warning restore 612, 618
        }
    }
}
